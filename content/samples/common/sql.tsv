INSERT INTO users (name, email) VALUES ('John Doe', 'john.doe@example.com');
INSERT INTO products (name, price) VALUES ('Chair', 49.99);
INSERT INTO orders (customer_id, product_id, quantity) VALUES (1001, 2001, 2);
INSERT INTO employees (name, department, salary) SELECT name, 'IT', 80000 FROM applicants WHERE experience_years > 5;
INSERT INTO logs (log_message, timestamp) VALUES ('User login', NOW());
INSERT INTO customers (name, email) SELECT name, email FROM temp_customers WHERE status = 'active';
INSERT INTO purchases (customer_id, product_id, quantity) VALUES (SELECT customer_id, 3001, 1 FROM customers WHERE country = 'USA');
INSERT INTO transactions (transaction_id, amount, transaction_date) VALUES (DEFAULT, 100.00, CURDATE());
INSERT INTO reviews (product_id, rating, review_date) SELECT product_id, 4.5, NOW() FROM products WHERE category = 'Electronics';
INSERT INTO backups (backup_name, backup_file) VALUES ('Daily Backup', 'backup_2024-06-20.bak');
UPDATE users SET status = 'Active' WHERE user_id = 1001;
UPDATE products SET price = 59.99 WHERE category = 'Electronics';
UPDATE orders SET status = 'Completed', completed_at = NOW() WHERE order_id = 2001;
UPDATE employees SET salary = salary * 1.05 WHERE department = 'Finance';
UPDATE customers SET loyalty_points = loyalty_points + 10 WHERE customer_id = 3001;
UPDATE inventory SET quantity = quantity - 1 WHERE product_id = 4001 AND warehouse_id = 1;
UPDATE messages SET archived = 1 WHERE created_at < DATE_SUB(NOW(), INTERVAL 30 DAYS);
UPDATE purchases SET quantity = 2 WHERE product_id = 5001 AND customer_id = 4001;
UPDATE transactions SET amount = amount - 10 WHERE transaction_date < '2024-06-01';
UPDATE reviews SET rating = 5.0 WHERE product_id = 6001 AND review_date >= '2023-01-01';
DELETE FROM users WHERE user_id = 1001;
DELETE FROM products WHERE price > 100;
DELETE FROM orders WHERE status = 'Cancelled';
DELETE FROM employees WHERE department = 'HR' AND hire_date < '2020-01-01';
DELETE FROM customers WHERE loyalty_points < 100;
DELETE FROM inventory WHERE quantity = 0;
DELETE FROM messages WHERE archived = 1 AND created_at < DATE_SUB(NOW(), INTERVAL 60 DAYS);
DELETE FROM purchases WHERE quantity < 1;
DELETE FROM transactions WHERE transaction_date < '2023-01-01';
DELETE FROM reviews WHERE rating < 3.0 AND review_date < '2022-01-01';
SELECT name, DATE_FORMAT(created_at, '%Y-%m-%d') AS formatted_date FROM logs;
SELECT customer_id, AVG(amount) AS avg_spent FROM transactions GROUP BY customer_id;
SELECT employee_id, name, salary * 12 AS annual_salary FROM employees WHERE department = 'Finance';
SELECT DISTINCT country FROM customers ORDER BY country;
SELECT product_id, name, price FROM products ORDER BY price DESC LIMIT 5;
SELECT order_id, customer_id, DATE_FORMAT(created_at, '%Y-%m-%d') AS order_date FROM orders WHERE DATE(created_at) = CURDATE();
SELECT employee_id, name, DATE_FORMAT(birthdate, '%M %e, %Y') AS formatted_birthdate FROM employees;
SELECT category, COUNT(*) AS num_products, AVG(price) AS avg_price FROM products GROUP BY category ORDER BY avg_price DESC;
SELECT customer_id, COUNT(*) AS num_orders FROM orders WHERE status = 'Completed' GROUP BY customer_id HAVING num_orders > 2;
SELECT product_id, name, price FROM products WHERE JSON_EXTRACT(details, '$.color') = 'red';
SELECT orders.order_id, customers.name, orders.total_amount FROM orders INNER JOIN customers ON orders.customer_id = customers.customer_id;
SELECT customers.name, COALESCE(SUM(orders.total_amount), 0) AS total_spent FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.name;
SELECT orders.order_id, customers.name, orders.total_amount FROM orders RIGHT JOIN customers ON orders.customer_id = customers.customer_id;
SELECT customers.name, COALESCE(SUM(orders.total_amount), 0) AS total_spent FROM customers FULL OUTER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.name;
SELECT e1.name AS employee, e2.name AS manager FROM employees e1 INNER JOIN employees e2 ON e1.manager_id = e2.employee_id;
